

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define mx 100000
vector<int>prime;
bool pc[10000040];
void sieve(){
  for(int i=2; i*i<=mx; i++)
    {
        if(!pc[i])
        {
            for(int j=i; j*i<=mx; j++)
                pc[i*j]=true;
        }
    }
    prime.pb(2);
    for(int i=3; i<=mx; i+=2)
    {
        if(!pc[i])
            prime.pb(i);
    }
}
long long euler_totient(long long n) {
    int root=sqrt(n);
    long long ret=n;
    for(int i=0; i<prime.size() && prime[i]<=root; i++) {
        if(n%prime[i]==0) {
            while(n%prime[i]==0)
                n/=prime[i];
            root=sqrt(n);
            ret-=(ret/prime[i]);
        }
    }
    if(n>1) {
        ret-=(ret/n);
    }
    return ret;
}
int main(){
    int t;
    sieve();
    cin>>t;
    while(t--){
    int x;
    cin>>x;
    cout<<euler_totient(x)<<endl;


    }
}
